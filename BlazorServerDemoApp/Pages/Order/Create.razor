@page "/Order/Create"
@inject IFoodData foodData
@inject IOrderData orderData
@inject NavigationManager navigationManager

<h3>Create</h3>

<EditForm Model="@order" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary Model="@order" />
    <div class="form-group">
        <label class="control-label">Item to Order</label>
        <select @onchange="FoodItemChange" class="form-control">
            <option value="">Select a meal...</option>
            @foreach (var f in foodItems)
            {
                <option value="@f.Id">@f.Title</option>
            }
        </select>
    </div>
    <div class="form-group">
        <label class="control-label">Quantity</label>
        <InputNumber @bind-Value="order.Quantity" class="form-control" />
        <ValidationMessage For="@(() => order.Quantity)" class="text-danger" />
    </div>
    <div class="form-group">
        <label class="control-label">Name for the Order</label>
        <InputText @bind-Value="order.OrderName" class="form-control" />
        <ValidationMessage For="@(() => order.OrderName)" class="text-danger" />
    </div>
    <div class="form-group">
        <input type="submit" value="Order Food" class="btn btn-primary" />
    </div>

</EditForm>

@code {
   private OrderModel order = new OrderModel();
   private List<FoodModel> foodItems = new List<FoodModel>();

   protected override async Task OnParametersSetAsync()
   {
       foodItems = await foodData.GetFood();
   }

   private void FoodItemChange(ChangeEventArgs e)
   {
       if(!string.IsNullOrWhiteSpace(e.Value.ToString()))
       {
           order.FoodID = int.Parse(e.Value.ToString());
       }
       else
       {
           order.FoodID = 0;
       }
   }

   private async Task HandleValidSubmit()
   {
       order.Total = order.Quantity * foodItems.Where(x => x.Id == order.FoodID).First().Price;

       int id = await orderData.CreateOrder(order);

       navigationManager.NavigateTo($"order/display/{id}");
   }
}
